{"name": "test_order_in_progress[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (906, 91). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=129.0.6668.58)\nStacktrace:\n0   chromedriver                        0x00000001026fbed4 cxxbridge1$str$ptr + 1906348\n1   chromedriver                        0x00000001026f4344 cxxbridge1$str$ptr + 1874716\n2   chromedriver                        0x0000000102308264 cxxbridge1$string$len + 89492\n3   chromedriver                        0x0000000102351cdc cxxbridge1$string$len + 391180\n4   chromedriver                        0x0000000102350330 cxxbridge1$string$len + 384608\n5   chromedriver                        0x000000010234e544 cxxbridge1$string$len + 376948\n6   chromedriver                        0x000000010234db60 cxxbridge1$string$len + 374416\n7   chromedriver                        0x000000010234303c cxxbridge1$string$len + 330604\n8   chromedriver                        0x0000000102342ad8 cxxbridge1$string$len + 329224\n9   chromedriver                        0x00000001023867d4 cxxbridge1$string$len + 606980\n10  chromedriver                        0x0000000102341134 cxxbridge1$string$len + 322660\n11  chromedriver                        0x0000000102341d84 cxxbridge1$string$len + 325812\n12  chromedriver                        0x00000001026c3f90 cxxbridge1$str$ptr + 1677160\n13  chromedriver                        0x00000001026c88fc cxxbridge1$str$ptr + 1695956\n14  chromedriver                        0x00000001026a94b8 cxxbridge1$str$ptr + 1567888\n15  chromedriver                        0x00000001026c91cc cxxbridge1$str$ptr + 1698212\n16  chromedriver                        0x000000010269aa60 cxxbridge1$str$ptr + 1507896\n17  chromedriver                        0x00000001026e5214 cxxbridge1$str$ptr + 1812972\n18  chromedriver                        0x00000001026e536c cxxbridge1$str$ptr + 1813316\n19  chromedriver                        0x00000001026f3fe4 cxxbridge1$str$ptr + 1873852\n20  libsystem_pthread.dylib             0x0000000185749f94 _pthread_start + 136\n21  libsystem_pthread.dylib             0x0000000185744d34 thread_start + 8", "trace": "self = <test_order_list_page.TestOrdersListPage object at 0x10d8b7050>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"75a86361d635cd7b11a44fbb08b76814\")>\n\n    def test_order_in_progress(self, driver):\n        orders_list_page = OrdersListPage(driver)\n        orders_list_page.click_on_element(Locators.PERSONAL_ACCOUNT_BTN)\n        orders_list_page.wait_for_page(Constants.PERSONAL_ACCOUNT_URL)\n        orders_list_page.fill_login_form(Locators.INPUT_EMAIL, Constants.EMAIL, Locators.INPUT_PASSWORD, Constants.PASSWORD, Locators.SIGN_IN_BTN)\n        orders_list_page.find_element_with_wait(Locators.CONSTRUCTOR_TITLE)\n        orders_list_page.drag_and_drop_item(Locators.BUN, Locators.BASKET_LOCATOR)\n        orders_list_page.drag_and_drop_item(Locators.SAUSE_SPICY_X_INGREDIENT, Locators.BASKET_LOCATOR)\n        orders_list_page.click_on_element(Locators.MAKE_ORDER_BTN)\n        orders_list_page.find_element_with_wait(Locators.ORDER_SUBTITLE)\n        orders_list_page.driver.implicitly_wait(5)\n        user_order_number = '#0' + orders_list_page.get_text_from_element(Locators.ORDER_NUMBER)\n>       orders_list_page.click_on_element(Locators.CLOSE_ICON_BTN)\n\ntests/test_order_list_page.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:31: in click_on_element\n    element.click()\n../../../opt/anaconda3/envs/practicum/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../opt/anaconda3/envs/practicum/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../opt/anaconda3/envs/practicum/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10df03b50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...000185749f94 _pthread_start + 136\\\\n21  libsystem_pthread.dylib             0x0000000185744d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (906, 91). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=129.0.6668.58)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001026fbed4 cxxbridge1$str$ptr + 1906348\nE       1   chromedriver                        0x00000001026f4344 cxxbridge1$str$ptr + 1874716\nE       2   chromedriver                        0x0000000102308264 cxxbridge1$string$len + 89492\nE       3   chromedriver                        0x0000000102351cdc cxxbridge1$string$len + 391180\nE       4   chromedriver                        0x0000000102350330 cxxbridge1$string$len + 384608\nE       5   chromedriver                        0x000000010234e544 cxxbridge1$string$len + 376948\nE       6   chromedriver                        0x000000010234db60 cxxbridge1$string$len + 374416\nE       7   chromedriver                        0x000000010234303c cxxbridge1$string$len + 330604\nE       8   chromedriver                        0x0000000102342ad8 cxxbridge1$string$len + 329224\nE       9   chromedriver                        0x00000001023867d4 cxxbridge1$string$len + 606980\nE       10  chromedriver                        0x0000000102341134 cxxbridge1$string$len + 322660\nE       11  chromedriver                        0x0000000102341d84 cxxbridge1$string$len + 325812\nE       12  chromedriver                        0x00000001026c3f90 cxxbridge1$str$ptr + 1677160\nE       13  chromedriver                        0x00000001026c88fc cxxbridge1$str$ptr + 1695956\nE       14  chromedriver                        0x00000001026a94b8 cxxbridge1$str$ptr + 1567888\nE       15  chromedriver                        0x00000001026c91cc cxxbridge1$str$ptr + 1698212\nE       16  chromedriver                        0x000000010269aa60 cxxbridge1$str$ptr + 1507896\nE       17  chromedriver                        0x00000001026e5214 cxxbridge1$str$ptr + 1812972\nE       18  chromedriver                        0x00000001026e536c cxxbridge1$str$ptr + 1813316\nE       19  chromedriver                        0x00000001026f3fe4 cxxbridge1$str$ptr + 1873852\nE       20  libsystem_pthread.dylib             0x0000000185749f94 _pthread_start + 136\nE       21  libsystem_pthread.dylib             0x0000000185744d34 thread_start + 8\n\n../../../opt/anaconda3/envs/practicum/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1726827278532, "stop": 1726827313577, "uuid": "9ef88dde-76a0-4e30-bb83-86c3d28e6638", "historyId": "2b7e165d76db062d77a318fcb0456139", "testCaseId": "26e9bc5c51b7916ca89f50023433e3d3", "fullName": "tests.test_order_list_page.TestOrdersListPage#test_order_in_progress", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_list_page"}, {"name": "subSuite", "value": "TestOrdersListPage"}, {"name": "host", "value": "MacBook-Pro-2.local"}, {"name": "thread", "value": "37990-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_list_page"}]}